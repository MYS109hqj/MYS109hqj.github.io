<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>a simple blog</title>
    <url>/2023/12/12/231212blog/</url>
    <content><![CDATA[<p>(注：bing搜索随笔的英文，结果如下：<br>随笔，英文称“essay”，词源来自法文动词“essayer”，意为“尝试”、“探索”。<br>经过后继搜索，essay由短文，尝试的意思；也可作动词表企图试图<br>所以这个category绝对不是正式的论文的意思)<br>有些丧，觉得自己应该多跟人主动交流，也许现在在做的事情在自我评价体系中得不到正面反馈，要跟他人聊天，多关注周围的事情。<br>觉得这观点并不新颖，如果说概括关键词的话，扩大关注范围、刻意练习表达、频繁交际。<br>基于现在头脑中的映像，我是个喜欢单干又单干不好，兴趣点在游戏实况、游戏赛事与排球，没能在某个领域专精的人。没有频繁尝试。</p>
<p>我现在对打排球有着极高的热忱，不过毕竟排球的反馈直观地来自球，“能力不行-&gt;球垫不好-&gt;球乱飞”的链条是能轻松感受到的。也不断地在学排球的理论知识，但也改变不了目前能力不足的现况。接球嘛，看球的轨迹，移动找击球点。两天没打球，上来垫球就不知道怎么垫了，扣球不能奢望能扣准，毕竟人球关系没有高概率找好的保障，现在这个水平只要愿意尝试、练习也就够了。<br>大一下（之所以说是大一下，而非高三，主要是基于频次和技术，大一下初感觉啥也不会。之前建立的友谊也难得可贵）到现在快一年，我的技术有一定提升，能够在攻防时进行有限的移动，养成了在接球时喊一下的习惯。（经过查看知乎上几篇“关于排球打不好”的文章，启发了后续观点）但毕竟排球的每一项技术（eg.接一传）都需要基本功，需要持续练习。<br>顺带一提，在今天早一点思考时尝试验证了“反应力不行”的想法，结果如下：<a href="https://humanbenchmark.com/tests/reactiontime">反应力测试网站</a><br><img src="/2023/12/12/231212blog/reaction.png" alt="reaction" title="reaction"></p>
]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构个人复习总结</title>
    <url>/2023/12/13/231216DataStructureRecovery02/</url>
    <content><![CDATA[<p>注:<a href="http://t.csdnimg.cn/HQvqN">markdown语法参考</a></p>
<p>231217第三次更新，更新完全覆盖之前的内容，查询可以GitHub历史记录<br>单纯个人复习输出，很多图片参考<a href="https://www.icourse163.org/learn/ZJU-93001">MOOC浙江大学数据结构</a>的课件<br>同时参考任课老师<strong>吕建明</strong>的课件内容<br>由于是个人输出，基于对生疏概念复习的需求，只是<strong>有选择性</strong>的做记录，很多内容都没有包含，仅供参考。<br><strong>如果有出错或者疑问的，我愿意一同探究解惑。</strong>按道理能看到这篇博客就有我的联系方式。没有就发邮件。考虑到可能承担未妥善管控不当言论的风险，暂不考虑开评论区&#x2F;留言板。</p>
<h2 id="一、时间复杂度"><a href="#一、时间复杂度" class="headerlink" title="一、时间复杂度"></a>一、时间复杂度</h2><p>1.时间复杂度的符号（上界下界确界）<br>参考文章：<a href="https://blog.csdn.net/anshuai_aw1/article/details/108449000">https://blog.csdn.net/anshuai_aw1/article/details/108449000</a><br><img src="/2023/12/13/231216DataStructureRecovery02/018.png" alt="时间复杂度的相关符号"><br>2.常见操作时间复杂度：<br>参考<a href="http://t.csdnimg.cn/oAog6">http://t.csdnimg.cn/oAog6</a><br>链表、堆栈、队列：插入删除O(1)；查找O(n)<br>二叉搜索树：都是O(logN)<br><img src="/2023/12/13/231216DataStructureRecovery02/002.png" alt="二叉堆时间复杂度"><br><img src="/2023/12/13/231216DataStructureRecovery02/003.png" alt="邻接列表的时间复杂度"></p>
<h2 id="二、链表"><a href="#二、链表" class="headerlink" title="二、链表"></a>二、链表</h2><p> 1.fence:课件中的定义：”The position of a list to execute operations is defined as a fence.”栅栏体现的是当前操作的位置。不同操作对应位置会有区别，结合下图更好理解。<br><img src="/2023/12/13/231216DataStructureRecovery02/004.png" alt="操作实例"></p>
<h2 id="三、树"><a href="#三、树" class="headerlink" title="三、树"></a>三、树</h2><p>1.树的深度与高度<br>教材定义：结点的深度是从根到结点的距离(The depth of a node M in the tree is the length of the path from the root of the tree to M)，高度比最大深度大一；<br>设总层数为n，则height&#x3D;n; depth_max&#x3D;n-1。<br>网上查阅时，有些教材定义根所在层数为1的，但按用的教材定义是根所在层数是0，导致最大深度是n-1，高度不受影响还是n。（顺带一提，2-3树也一样，注意根的深度是0）<br>2.满(<strong>full</strong>)二叉树与完全(<strong>complete</strong>)二叉树<br><strong>full binary tree</strong>，满二叉树要求每层都达到最大结点树，即结点个数是2^n-1；<br><strong>complete binary tree</strong>，完全二叉树要求最后一层的结点必须从左到右连续，尤其以数组存储时最大结点下标为n，则n以前的有效下标都得有数据<br>(至于下标为0的就看怎么构建了，注意一下在堆中0有没有放哨兵，0不存有效数据是父子下标对应关系会变的，不过课上讲的好像没用哨兵；哨兵放比数据范围更大或更小的值，比较时哨兵就可以起到防止越界的作用)<br>3.注：普通树考点有集合union</p>
<h2 id="四、图"><a href="#四、图" class="headerlink" title="四、图"></a>四、图</h2><p>1.最短路径问题：<br>单源最短路径：从某固定源点出发，求其到所有其它顶点的最短路径<br>多源最短路径：求任意两顶点间的最短路径<br>有权图的单源最短路算法：Dijkstra算法<br><img src="/2023/12/13/231216DataStructureRecovery02/005.png" alt="源自MOOC浙江大学数据结构课件"><br><img src="/2023/12/13/231216DataStructureRecovery02/006.png" alt="源自MOOC浙江大学数据结构课件"><br>（多源最短路算法：Floyd算法，教材上没有，思想差不多）<br><img src="/2023/12/13/231216DataStructureRecovery02/007.png" alt="源自MOOC浙江大学数据结构课件"><br><img src="/2023/12/13/231216DataStructureRecovery02/008.png" alt="源自MOOC浙江大学数据结构课件"><br>2.最小生成树问题<br>(1)Prim算法：贪心法，每次取与邻接点间的边中的最短边<br><img src="/2023/12/13/231216DataStructureRecovery02/009.png" alt="源自MOOC浙江大学数据结构课件"><br>(2)Kruskal算法：将森林合并成树，每次取所有边中的最短边，如果不构成回路就加入。（用并查集，跟集合差不多。根结点存放-n，n表示所在集合中的元素个数；非根元素存放父亲结点，即父亲结点的下标）<br><img src="/2023/12/13/231216DataStructureRecovery02/010.png" alt="源自MOOC浙江大学数据结构课件"></p>
<h2 id="五、散列-哈希"><a href="#五、散列-哈希" class="headerlink" title="五、散列&#x2F;哈希"></a>五、散列&#x2F;哈希</h2><p>1.open hashing，简单来说，指针存储，无限空间。别的都是closed hashing，只能在有限的哈希表里。<br>2.冲突处理Collision Resolution Methods<br>下面的都属于探测散列表(probing hash table)，对应的另一种方法是分离链接法(separate chaining)，就是存指针弄链表。<br>线性侦测法(Linear Probing)向后逐个试探,主要还是看它给的p(K,i)是什么，一般是用h(K)+p(K,i)作为下标检测是否为空&#x2F;命中。<br>对于平方探测法(quadratic probing)，课本里给的形式是通用的，可以理解为p(K,i)是二次函数，课本原话p(K,i)&#x3D;i^2是最简单平方探测法的例子。考的话应该会给p(K,i)的。（写代码用的话我是用正负i^2的）<br>（什么时候可能正负都要试，见下图：源自浙江大学MOOC数据结构的讲义）<br><img src="/2023/12/13/231216DataStructureRecovery02/011.png" alt="源自MOOC浙江大学数据结构课件"><br>（使用平方探测仍会产生二次聚集(secondary clustering)，大致就是h(x)一致，为解决这个缺憾引出了双散列(double hashing)）<br>3.注：删除时要设墓碑。（但对散列要求没这么高吧，不过掌握没坏事）</p>
<h2 id="六、索引"><a href="#六、索引" class="headerlink" title="六、索引"></a>六、索引</h2><p>1.2-3树<br>具体操作可以参考下面这篇文章<br><a href="https://blog.csdn.net/kexuanxiu1163/article/details/87887529">https://blog.csdn.net/kexuanxiu1163/article/details/87887529</a><br>2.B-树与B+树（区分：B+分别索引结点和叶子结点，所有数据都保存在叶子结点中）<br><a href="https://blog.csdn.net/u014453898/article/details/112469113">https://blog.csdn.net/u014453898/article/details/112469113</a></p>
<h2 id="七、排序"><a href="#七、排序" class="headerlink" title="七、排序"></a>七、排序</h2><p>（基本术语：内部排序Internal Sorting 给内存里的排序、外部排序External Sorting 给磁盘里的排序）<br>1.简单排序<br>冒泡排序、插入排序都稳定；选择排序不稳定<br>选择排序可以优化为堆排序(O(nlogn))，快速找到最小值。<br>2.Shellsort希尔排序<br><img src="/2023/12/13/231216DataStructureRecovery02/012.png" alt="源自MOOC浙江大学数据结构课件"><br><img src="/2023/12/13/231216DataStructureRecovery02/013.png" alt="源自MOOC浙江大学数据结构课件"><br>（有归并排序mergesort这个东西，二分法思想）<br>3.快速排序QuickSort<br><img src="/2023/12/13/231216DataStructureRecovery02/014.png" alt="源自MOOC浙江大学数据结构课件"><br><img src="/2023/12/13/231216DataStructureRecovery02/015.png" alt="源自MOOC浙江大学数据结构课件"><br>4.箱&#x2F;桶排序BinSort：很像哈希（散列）的开放定址法，都是空间换时间，T(N,M)&#x3D;O(M+N)<br>5.基排序RadixSort，次位优先主位优先<br><img src="/2023/12/13/231216DataStructureRecovery02/016.png" alt="源自MOOC浙江大学数据结构课件"><br><img src="/2023/12/13/231216DataStructureRecovery02/017.png" alt="源自MOOC浙江大学数据结构课件"></p>
]]></content>
      <categories>
        <category>major</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
</search>
